{
  "szhn-table-page": {
    "prefix": "stp",
    "body": [
      "<template>",
      "  <div>",
      "    <table-page",
      "      ref=\"tablePage\"",
      "      class=\"table-border-none\"",
      "      has-serial",
      "      :form-values.sync=\"formValues\"",
      "      :form-items=\"displayFormItems\"",
      "      :table-data=\"tableData\"",
      "      :table-column=\"tableColumn\"",
      "      :page-config=\"pages\"",
      "      :page-sizes=\"[10, 20]\"",
      "      :table-config=\"{ border: true }\"",
      "      :loading=\"loading\"",
      "      :title=\"$route.meta.title\"",
      "      @pageChange=\"handlePageChange\"",
      "      @search=\"onSearch\"",
      "    >",
      "      <template #search-btns>",
      "        <el-button type=\"text\" @click=\"toggleMore\">",
      "          <template v-if=\"!showMore\"> 展开 <i class=\"el-icon-arrow-down\"></i> </template>",
      "          <template v-else> 收缩 <i class=\"el-icon-arrow-up\"></i> </template>",
      "        </el-button>",
      "      </template>",
      "      <template #btns>",
      "        <!-- You can put anything other than buttons -->",
      "        <div>",
      "          <el-button",
      "            v-if=\"tableData.length > 0\"",
      "            :loading=\"exportBtnLoading\"",
      "            type=\"primary\"",
      "            @click=\"handleExport()\"",
      "          >导出</el-button>",
      "        </div>",
      "      </template>",
      "      <!-- 累计成功率 -->",
      "      <template #successInnovacationsRate=\"{ row }\">",
      "        <span>{{ (row.successInnovacationsRate || '0') + '%' }}</span>",
      "      </template>",
      "",
      "      <template #column>",
      "        <el-table-column label=\"操作\" fixed=\"right\" :min-width=\"140\">",
      "          <template slot-scope=\"{ row }\">",
      "            <el-button type=\"text\" @click=\"onView(row)\"> 查看 </el-button>",
      "          </template>",
      "        </el-table-column>",
      "      </template>",
      "    </table-page>",
      "  </div>",
      "</template>",
      "<script>",
      "export default {",
      "  // =========改这里=================",
      "  name: 'InterfaceMonitor',",
      "  components: {},",
      "  data() {",
      "    return {",
      "      showMore: false,",
      "      exportBtnLoading: false,",
      "      loading: false,",
      "      tableData: [],",
      "      formValues: {},",
      "      pages: {",
      "        pageSize: 10,",
      "        pageNo: 1,",
      "        total: 0",
      "      },",
      "",
      "      // =========改这里=================",
      "      formItems: [",
      "        {",
      "          type: 'el-input',",
      "          label: '接口中文名',",
      "          prop: 'apiNameCn'",
      "        },",
      "      ],",
      "      // =========改这里=================",
      "      tableColumn: [",
      "        { label: '接口中文名称', prop: 'apiChineseName', width: '150px' },",
      "      ],",
      "    }",
      "  },",
      "  computed: {",
      "    displayFormItems() {",
      "      return this.showMore ? this.formItems : this.formItems.slice(0, 3)",
      "    }",
      "  },",
      "  mounted() {",
      "    this.fetchList()",
      "  },",
      "  methods: {",
      "    handleExport() {",
      "      this.exportBtnLoading = true",
      "      // =============改这里=================",
      "      exportList(this.getParams())",
      "        .then((res) => {",
      "          const downloadUrl = window.URL.createObjectURL(new Blob([res]))",
      "          const link = document.createElement('a')",
      "          link.href = downloadUrl",
      "          link.setAttribute('download', `接口实时监控.xlsx`)",
      "          document.body.appendChild(link)",
      "          link.click()",
      "          link.remove()",
      "          this.$message.success('导出成功')",
      "        })",
      "        .catch(() => {",
      "          this.$message.error('导出失败')",
      "        })",
      "        .finally(() => {",
      "          this.exportBtnLoading = false",
      "        })",
      "    },",
      "    onView(row) {",
      "      console.log('row', row);",
      "    },",
      "    onSearch() {",
      "      this.pages.pageNo = 1",
      "      this.fetchList()",
      "    },",
      "    handlePageChange({ page, limit }) {",
      "      this.pages.pageSize = limit",
      "      this.pages.pageNo = page",
      "      this.fetchList()",
      "    },",
      "    getParams() {",
      "      return { ...this.formValues, ...this.pages }",
      "    },",
      "    async fetchList() {",
      "      this.loading = true",
      "      try {",
      "        // =============改这里=================",
      "        const res = await api(this.getParams())",
      "        if (res.success) {",
      "          this.tableData = res.data.list",
      "          this.pages.total = res.data.total",
      "        }",
      "      } finally {",
      "        this.loading = false",
      "      }",
      "    },",
      "    toggleMore() {",
      "      this.showMore = !this.showMore",
      "    }",
      "  }",
      "}",
      "</script>",
      "",
      ""
    ],
    "description": "szhn-table-page"
  },
  "szhn-table-page-dialog": {
    "prefix": "stpd",
    "body": [
      "<template>",
      "  <el-dialog :visible.sync=\"visible\" destroy-on-close :title=\"title\" width=\"80%\">",
      "    <table-page",
      "      ref=\"tablePage\"",
      "      class=\"table-border-none table-page-wrapper\"",
      "      has-serial",
      "      :form-values.sync=\"formValues\"",
      "      :form-items=\"formItems\"",
      "      :table-data=\"tableData\"",
      "      :table-column=\"tableColumn\"",
      "      :page-config=\"pages\"",
      "      :page-sizes=\"[10, 20]\"",
      "      :table-config=\"{ border: true, 'row-key': 'id' }\"",
      "      :loading=\"loading\"",
      "      :title=\"$route.meta.title\"",
      "      :has-table-selection=\"true\"",
      "      :is-reserve-selection=\"true\"",
      "      :multiple-selection.sync=\"selectedList\"",
      "      @pageChange=\"handlePageChange\"",
      "      @search=\"onSearch\"",
      "    >",
      "      <template #search-btns>",
      "        <el-button type=\"text\" @click=\"toggleShowMore\">",
      "          <template v-if=\"!showMore\"> 展开 <i class=\"el-icon-arrow-down\"></i> </template>",
      "          <template v-else> 收缩 <i class=\"el-icon-arrow-up\"></i> </template>",
      "        </el-button>",
      "      </template>",
      "      <template #btns>",
      "        <div class=\"selected-tags\">",
      "          <span class=\"title\">已选择:</span>",
      "",
      "          <div style=\"flex: 1\">",
      "            <el-tag",
      "              v-for=\"item in newSelectedList\"",
      "              :key=\"item.id\"",
      "              closable",
      "              class=\"resource-tag\"",
      "              @close=\"cancelSelection(item)\"",
      "            >",
      "              {{ item.code }}</el-tag",
      "            >",
      "          </div>",
      "        </div>",
      "      </template>",
      "    </table-page>",
      "    <div slot=\"footer\">",
      "      <el-button @click=\"cancelDialog\">取消</el-button>",
      "      <el-button type=\"primary\" @click=\"handleConfirm\">提交</el-button>",
      "    </div>",
      "  </el-dialog>",
      "</template>",
      "<script>",
      "export default {",
      "  components: {},",
      "  props: {",
      "    title: {",
      "      type: String,",
      "      default: '选择相关接口'",
      "    }",
      "  },",
      "  data() {",
      "    return {",
      "      showMore: false,",
      "",
      "      newSelectedList: [],",
      "      tableColumn: [],",
      "      tableData: [],",
      "",
      "      formItems: [],",
      "      formValues: {},",
      "",
      "      visible: false,",
      "      loading: false,",
      "      pages: {",
      "        pageSize: 10,",
      "        pageNo: 1,",
      "        total: 0",
      "      },",
      "      selectedList: []",
      "    }",
      "  },",
      "  computed: {},",
      "  watch: {",
      "    visible(newVal) {",
      "      if (newVal === false) {",
      "        this.selectedList = []",
      "      }",
      "    },",
      "    selectedList(newVal, oldVal) {",
      "      const newIds = newVal.map((item) => item.id)",
      "      if (newVal.length > oldVal.length) {",
      "        this.newSelectedList = this.mergeLists(this.newSelectedList, newVal)",
      "      } else {",
      "        const removedIds = oldVal.filter((item) => !newIds.includes(item.id)).map((item) => item.id)",
      "        this.newSelectedList = this.newSelectedList.filter((item) => !removedIds.includes(item.id))",
      "      }",
      "    }",
      "  },",
      "  mounted() {},",
      "  methods: {",
      "    async onSearch() {",
      "      this.pages.pageNo = 1",
      "      await this.fetchList()",
      "      this.updateSelectionTable(this.newSelectedList)",
      "    },",
      "    async show(selectedItems, columns, formItems) {",
      "      this.tableColumn = columns",
      "      this.formItems = formItems",
      "",
      "      this.formValues = {}",
      "      this.visible = true",
      "      this.pages.pageNo = 1",
      "      await this.fetchList()",
      "      this.newSelectedList = JSON.parse(JSON.stringify(selectedItems))",
      "",
      "      this.$nextTick(() => {",
      "        this.$refs.tablePage.$refs.table.doLayout()",
      "        this.updateSelectionTable(this.newSelectedList)",
      "      })",
      "    },",
      "    updateSelectionTable(selectedItems = []) {",
      "      const selectedIds = selectedItems.map((item) => item.id)",
      "      this.$nextTick(() => {",
      "        this.tableData.forEach((row) => {",
      "          const isSelected = selectedIds.includes(row.id)",
      "          this.$refs.tablePage.$refs.table.toggleRowSelection(row, isSelected)",
      "        })",
      "      })",
      "    },",
      "    cancelSelection(row) {",
      "      if (this.newSelectedList.length === 1) {",
      "        this.$message.error('至少选择一个接口')",
      "        return",
      "      }",
      "",
      "      const index = this.findItemIndex(row.id)",
      "      if (index !== -1) {",
      "        this.newSelectedList.splice(index, 1)",
      "      }",
      "",
      "      this.$nextTick(() => {",
      "        this.$refs.tablePage.$refs.table.doLayout()",
      "        this.updateSelectionTable(this.newSelectedList)",
      "      })",
      "    },",
      "    findItemIndex(id) {",
      "      return this.newSelectedList.findIndex((item) => item.id === id)",
      "    },",
      "    getParams() {",
      "      const { pageNo, pageSize } = this.pages",
      "      const params = {",
      "        pageNo,",
      "        pageSize,",
      "        ...this.formValues",
      "      }",
      "",
      "      return params",
      "    },",
      "    async fetchList() {",
      "      this.loading = true",
      "      try {",
      "        // =============改这里=============",
      "        const response = await api(this.getParams())",
      "        if (response.success) {",
      "          this.tableData = response.data.tableData",
      "          this.pages.total = response.data.total",
      "        }",
      "      } finally {",
      "        this.loading = false",
      "      }",
      "    },",
      "    async handlePageChange({ page, limit }) {",
      "      this.pages.pageNo = page",
      "      this.pages.pageSize = limit",
      "      await this.fetchList()",
      "      this.updateSelectionTable(this.newSelectedList)",
      "    },",
      "    handleConfirm() {",
      "      if (!this.newSelectedList.length) {",
      "        this.$message.error('请先选择接口')",
      "        return",
      "      }",
      "",
      "      this.visible = false",
      "      this.$emit('selectedCatalog', [...this.newSelectedList])",
      "    },",
      "    cancelDialog() {",
      "      this.visible = false",
      "    },",
      "    mergeLists(list1, list2) {",
      "      const combinedList = [...list1, ...list2]",
      "      const uniqueList = Array.from(new Set(combinedList.map((item) => item.id))).map((id) =>",
      "        combinedList.find((item) => item.id === id)",
      "      )",
      "      return uniqueList",
      "    },",
      "    toggleShowMore() {",
      "      this.showMore = !this.showMore",
      "    }",
      "  }",
      "}",
      "</script>",
      "<style lang=\"scss\">",
      ".table-page-wrapper {",
      "  padding: 0 0 30px 0;",
      "  .selected-tags {",
      "    margin-bottom: 16px;",
      "    display: flex;",
      "    .title {",
      "      font-weight: bold;",
      "      color: #333;",
      "      margin-top: 4px;",
      "    }",
      "    .resource-tag {",
      "      margin-left: 10px;",
      "      margin-bottom: 10px;",
      "      border-radius: 4px !important;",
      "    }",
      "  }",
      "}",
      "</style>",
      ""
    ],
    "description": "szhn-table-page-dialog"
  } 
}